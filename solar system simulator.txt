<html lang="en">
<head>
    <title> Our Project</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
       button{
			display: inline-block;
			padding: 15px 55px;
			font-size: 22px;
			font-weight: 800;
			font-style: normal;
			font-family: Times New Roman, Helvetica, serif;
			text-align: center;
			color:black;
			border: none;
			background-color: #9900ff ;
		    border-radius: 25px;
			  }	
		  	  
		body {
            margin: 0px;
            background-color: #2a9df4;
			color:black;
			font-size:30px;
			font-family: Times New Roman, Helvetica, serif;
			font-style: normal;
			font-weight: bold;
			padding: 2.5px;
			text-align:center;
            overflow: hidden;

			 }
			 
	.buttone:hover {
			background-color: black;
			box-shadow: 0 20px 60px 0 rgba(0,0,0,30),0 17px 50px 0 rgba(0,0,0,30);
			color: #2a9df4;
			font-size:35px;
			padding: 15px 40px;

			 }
    </style>
</head>
<body>


	<p id="demo"></p> 
 
	  <button class="button buttone" onclick="mer()" > Mercury </button>  
	  <button class="button buttone" onclick="ven()"> Venus </button>
	  <button class="button buttone" onclick="ear()"> Earth </button>
	  <button class="button buttone" onclick="mar()"> Mars </button>
	  <button class="button buttone" onclick="jup()"> Jupiter </button>
	  <button class="button buttone" onclick="sat()"> Saturn </button>
	  <button class="button buttone" onclick="ura()"> Uranus </button>
	  <button class="button buttone" onclick="nep()"> Neptune </button>


    <script src="build/three.js"></script>
    <script src="js/controls/OrbitControls.js"></script>


    <script>

        var camera, scene, renderer, planeMesh, venus, earth, mars, jupiter, saturn, uranus, neptune, sun, mercury, moon,light;

init();
animate();
manySpheres();

function init() 
{


    var Background_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/download-1583327893.jpg');
    scene = new THREE.Scene();
    scene.background = Background_texture;
	
	//Camera
	
    camera = new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,1000);
    camera.position.z = 100;
    camera.position.x = 500;
    camera.position.y = 500;
    scene.add(camera);

    // create an AudioListener and add it to the camera
 const listener = new THREE.AudioListener();
 camera.add( listener );

// create a global audio source
 const sound = new THREE.Audio( listener );

// load a sound and set it as the Audio object's buffer
 const audioLoader = new THREE.AudioLoader();
 audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {
	sound.setBuffer( buffer );
	sound.setLoop( true );
	sound.setVolume( 0.5 );
	sound.play();
});


    var control = new THREE.OrbitControls(camera);
    var boxGeo = new THREE.BoxBufferGeometry(0, 0, 0);
    boxMesh = new THREE.Mesh(boxGeo);

    	//Planets
   		//Sun

	var Sun_geometry = new THREE.SphereGeometry(50, 40, 50);
	var Sun_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/sun.jpg');
	var Sun_material = new THREE.MeshBasicMaterial({ map: Sun_texture });
	sun= new THREE.Mesh(Sun_geometry, Sun_material);
	scene.add(sun);
	sun.position.y += 0;


		//Mercury

	var Mercury_geometry = new THREE.SphereGeometry(10, 40, 10);
	var Mercury_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/mercury.jpg');
	var Mercury_material = new THREE.MeshLambertMaterial({ map: Mercury_texture });
	mercury = new THREE.Mesh(Mercury_geometry, Mercury_material);
	scene.add(mercury);
	mercury.position.y -= 75;

		//Venus

	var Venus_geometry = new THREE.SphereGeometry(15, 40, 15);
	var Venus_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/venus.jpg');
	var Venus_material = new THREE.MeshLambertMaterial({ map: Venus_texture });
	venus = new THREE.Mesh(Venus_geometry, Venus_material);
	scene.add(venus);
	venus.position.x += 79;
	venus.position.y -= 60;

		//Earth

	var Earth_geometry = new THREE.SphereGeometry(17, 40, 17);
	var Earth_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/earth.jpg');
	var Earth_material = new THREE.MeshLambertMaterial({ map: Earth_texture });
	earth = new THREE.Mesh(Earth_geometry, Earth_material);
	scene.add(earth);
	earth.position.x += 145;
	earth.position.y -= 40;

		//Moon

	var Moon_geometry = new THREE.SphereGeometry(10, 40, 10);
	var Moon_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/moon.jpg');
	var Moon_material = new THREE.MeshLambertMaterial({ map: Moon_texture });
	moon = new THREE.Mesh(Moon_geometry, Moon_material);
	//scene.add(moon);
	moon.position.x += 174;
	moon.position.y -= 55;
	
		//Mars

	var Mars_geometry = new THREE.SphereGeometry(20, 40, 20);
	var Mars_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/mars.jpg');
	var Mars_material = new THREE.MeshLambertMaterial({ map: Mars_texture });
	mars = new THREE.Mesh(Mars_geometry, Mars_material);
	scene.add(mars);
	mars.position.x += 182;
	mars.position.y -= 100;

		//Jupiter

	var Jupiter_geometry = new THREE.SphereGeometry(33, 40, 33);
	var Jupiter_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/jupiter.jpg');
	var Jupiter_material = new THREE.MeshLambertMaterial({ map: Jupiter_texture });
	jupiter = new THREE.Mesh(Jupiter_geometry, Jupiter_material);
	scene.add(jupiter);
	jupiter.position.x += 268;

		//Saturn

	var Saturn_geometry = new THREE.SphereGeometry(25, 40, 25);
	var Saturn_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/saturn.jpg');
	var Saturn_material = new THREE.MeshLambertMaterial({ map: Saturn_texture });
	saturn = new THREE.Mesh(Saturn_geometry, Saturn_material);
	scene.add(saturn);
	saturn.position.x += 348;

		//SaturnRings

	var SaturnRings_geometry = new THREE.RingGeometry(29.3,35, 30);
	var SaturnRings_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/saturn-ring.jpg');
	var SaturnRings_material = new THREE.MeshLambertMaterial({ map: SaturnRings_texture });
	ring = new THREE.Mesh(SaturnRings_geometry, SaturnRings_material);
	saturn.add(ring);


		//Uranus

	var Uranus_geometry = new THREE.SphereGeometry(20, 40, 20);
	var Uranus_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/uranus.jpg');
	var Uranus_material = new THREE.MeshLambertMaterial({ map: Uranus_texture });
	uranus = new THREE.Mesh(Uranus_geometry, Uranus_material);
	scene.add(uranus);
	uranus.position.x -= 437;

		//Neptune

	var Neptune_geometry = new THREE.SphereGeometry(26, 40, 26);
	var Neptune_texture = new THREE.TextureLoader().load('../Computer Graphics Final Project/images/neptune.jpg');
	var Neptune_material = new THREE.MeshLambertMaterial({ map: Neptune_texture });
	neptune = new THREE.Mesh(Neptune_geometry, Neptune_material);
	scene.add(neptune);
	neptune.position.x -= 527;

    //Light
	light = new THREE.PointLight({ color: 'white' },2, 800);
	light.position.set(50, 40, 50);
	scene.add(light);


	//Orbits:

	//Mercury

	var Mercury_radius = 75,
   	Mercury_segment = 2000,
   	merc_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
   	merc_geometry = new THREE.CircleGeometry(Mercury_radius, Mercury_segment);
   
	merc_geometry.vertices.shift();
 
	scene.add(new THREE.Line(merc_geometry, merc_material));

	//Venus
				
	var Venus_radius = 100,
    Venus_segment = 2000,
    ven_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    ven_geometry = new THREE.CircleGeometry(Venus_radius, Venus_segment);
   
	ven_geometry.vertices.shift();
   	scene.add(new THREE.Line(ven_geometry, ven_material));

 	//Earth

	var Earth_radius = 150,
    Earth_segment = 2000,
    ear_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    ear_geometry = new THREE.CircleGeometry(Earth_radius, Earth_segment);
   
	ear_geometry.vertices.shift();
   
	scene.add(new THREE.Line(ear_geometry, ear_material));

	//Mars

	var Mars_radius = 210,
    Mars_segment = 2000,
    mar_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    mar_geometry = new THREE.CircleGeometry(Mars_radius, Mars_segment);
   
	mar_geometry.vertices.shift();

	scene.add(new THREE.Line(mar_geometry, mar_material));

	//Jupiter
	
	var Jupiter_radius = 270,
    Jupiter_segment = 2000,
    jup_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    jup_geometry = new THREE.CircleGeometry(Jupiter_radius, Jupiter_segment);
   	
	jup_geometry.vertices.shift();
   
	scene.add(new THREE.Line(jup_geometry, jup_material));

	//Saturn
   
	var Saturn_radius = 350,
    Saturn_segment = 2000,
    sat_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    sat_geometry = new THREE.CircleGeometry(Saturn_radius, Saturn_segment);
   
	sat_geometry.vertices.shift();
   
	scene.add(new THREE.Line(sat_geometry, sat_material));

	//Uranus

   	var Uranus_radius = 440,
    Uranus_segment = 2000,
    ura_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    ura_geometry = new THREE.CircleGeometry(Uranus_radius, Uranus_segment);
   
	ura_geometry.vertices.shift();
   
	scene.add(new THREE.Line(ura_geometry, ura_material));

	//Neptune

	var Neptune_radius = 530,
    Neptune_segment = 2000,
    nep_material = new THREE.LineBasicMaterial({ color: 0xffffff }),
    nep_geometry = new THREE.CircleGeometry(Neptune_radius, Neptune_segment);
   
	nep_geometry.vertices.shift();
   
	scene.add(new THREE.Line(nep_geometry, nep_material));

	//Orbits done //

	renderer = new THREE.WebGLRenderer();
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize(window.innerWidth, window.innerHeight);

	document.body.appendChild(renderer.domElement);

	}


function manySpheres(){

	spheres = new THREE.Object3D();

	/* The Sphere */
    sphereGeometry = new THREE.SphereGeometry(1.5, 10, 10);
    sphereMaterial = new THREE.MeshBasicMaterial( {color:0xffffff} );//F8FF12

	//Random spheres
	for(var i=0;i<300;i++){
		sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );
		//Position
		sphere.rotation.x = (Math.random()-.5)*Math.PI;
		sphere.rotation.y = (Math.random()-.5)*Math.PI;
		sphere.rotation.z = (Math.random()-.5)*Math.PI;

		sphere.position.x = (Math.random()-.5)*1700;
		sphere.position.y = (Math.random()-.5)*1700;
		sphere.position.z = (Math.random()-.5)*1700;

		spheres.add(sphere);
	}
	scene.add(spheres);
};


function orbit(speed,radiusOrbit,planet)
{
	date=Date.now()*speed;
	planet.position.set(Math.cos(date)* radiusOrbit , Math.sin(date)*radiusOrbit,0);
}
function orbityz(speed,radiusOrbit,planet)
{
	date=Date.now()*speed;
	planet.position.set(0 ,145, Math.sin(date)*radiusOrbit);
}


function animate() 
{

    renderer.render(scene, camera);
    
    
    
	// btlf 7awlen nafsahaa 
	
	sun.rotation.x +=0.00648;
	sun.rotation.y +=0.00648;
	sun.rotation.z +=0.00648;

    mercury.rotation.x += 0.001416;
    mercury.rotation.y += 0.001416;
    mercury.rotation.z += 0.001416;
	
	venus.rotation.x += 0.005832;
    venus.rotation.y += 0.005832;
    venus.rotation.z += 0.005832;
	
	earth.rotation.x += 0.024;
    earth.rotation.y += 0.024;
	earth.rotation.z += 0.024;

    mars.rotation.x += 0.0246;
    mars.rotation.y += 0.0246;
    mars.rotation.z += 0.0246;
	
	jupiter.rotation.x += 0.010;
    jupiter.rotation.y += 0.010;
    jupiter.rotation.z += 0.010;
	
	saturn.rotation.x += 0.010;
    saturn.rotation.y += 0.010;
    saturn.rotation.z += 0.010;
	
	uranus.rotation.x += 0.017;
    uranus.rotation.y += 0.017;
    uranus.rotation.z += 0.017;
	
	neptune.rotation.x += 0.016;
    neptune.rotation.y += 0.016;
    neptune.rotation.z += 0.016;

	// btlef 3la el orbits using function { orbit(speed,radiusOrbit,planet)}
	
		orbit (0.000159,75,mercury); //mercury rotation 
		orbit (0.000116,100,venus); //venus rotation
		orbit (0.0001,150,earth); //earth rotation
		//orbityz (0.001,174,moon); //moon rotation z axis
		//orbit (0.0001,174,moon); //moon rotation
		orbit (0.0000802,210,mars); //mars rotation
		orbit (0.0000435,270,jupiter); //jupiter rotation
		orbit (0.0000323,350,saturn); //Saturn rotation
		orbit (0.0000227,440,uranus); //uranus rotation
		orbit (0.0000181,530,neptune); //neptune rotation

	
requestAnimationFrame(animate);
}


function mer() {
  	var txt;
  	if (confirm("Information on Mercury:")) {
	txt = " Distance from the sun: 57,91m km - Orbital Period: 88 days - Radius: 2,439.7 km - Mass: 3.29 × 10^23 kg "; 
	var radiuss = 75,
    segmentss = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radiuss, segmentss);
	geometry.vertices.shift();
	scene.add(new THREE.Line(geometry, material));
	} else{
	
		txt= "Operation cancelled";
		var radiuss = 75,
    	segmentss = 2000,
    	material = new THREE.LineBasicMaterial({ color: 0x283747 }),
    	geometry = new THREE.CircleGeometry(radiuss, segmentss);
		geometry.vertices.shift();
   
  		scene.add(new THREE.Line(geometry, material));
		
		}
  	document.getElementById("demo").innerHTML = txt;
	}

function ven() {
  	var txt;
  	if (confirm("Information on Venus:")) {
    	txt = " Distance from the sun: 108.2m km - Orbital Period: 225 days - Radius: 6,051.8 km - Mass: 4.867 × 10^24 kg ";
  
	var radius = 100,
    segments = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius, segments);
   
	geometry.vertices.shift();
   
	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
  	} else{
  		txt= "Operation cancelled";
		var radius = 100,
    	segments = 2000,
    	material = new THREE.LineBasicMaterial({ color: 0x283747 }),
    	geometry = new THREE.CircleGeometry(radius, segments);
   
		geometry.vertices.shift();
   
		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
  		}
  	document.getElementById("demo").innerHTML = txt;
	}

function ear() {
  	var txt;
  	if (confirm("Information on Earth:")) {
    	txt = " Distance from the sun: 149.6m km - Orbital Period: 365 days - Radius: 6,371 km - Mass: 5.972 × 10^24 kg - Age: 4.543 billion years ";
  	var radius1 = 150,
    segments1 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius1, segments1);
   
	geometry.vertices.shift();

	scene.add(new THREE.Line(geometry, material));
  	} else{
  		txt= "Operation cancelled";
  		var radius1 = 150,
    	segments1 = 2000,
    	material = new THREE.LineBasicMaterial({ color: 'aqua' }),
    	geometry = new THREE.CircleGeometry(radius1, segments1);

		geometry.vertices.shift();
   
		scene.add(new THREE.Line(geometry, material));
  		}
  	document.getElementById("demo").innerHTML = txt;
	}

function mar() {
  	var txt;
  	if (confirm("Information on Mars:")) {
  
	var radius2 = 210,
    segments2 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius2, segments2);

	geometry.vertices.shift();
   
	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
    txt = " Distance from the sun: 237.26m km - Orbital Period: 686.971 days - Radius: 3,389.5 km - Mass: 6.39 × 10^23 kg ";
  	} else{
	  	txt= "Operation cancelled";
	  
		var radius2 = 210,
	    segments2 = 2000,
	    material = new THREE.LineBasicMaterial({ color: 0x283747 }),
	    geometry = new THREE.CircleGeometry(radius2, segments2);
	   
		geometry.vertices.shift();
	   
		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
 	 	}
  	document.getElementById("demo").innerHTML = txt;
	}

function jup() {
  	var txt;
  	if (confirm("Information on Jupiter:")) {
    txt = " Distance from the sun: 778.5m km - Orbital Period: 12 years - Radius: 69,911 km - Mass: 1.898 × 10^27 kg ";

	var radius3 = 270,
    segments3 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius3, segments3);

	geometry.vertices.shift();

	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
  	} else{
	  	txt= "Operation cancelled";
	  
		var radius3 = 270,
	    segments3 = 2000,
	    material = new THREE.LineBasicMaterial({ color: 0x283747 }),
	    geometry = new THREE.CircleGeometry(radius3, segments3);

		geometry.vertices.shift();

		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
 		}
  	document.getElementById("demo").innerHTML = txt;
	}

function sat() {
  	var txt;
  	if (confirm("Information on Saturn:")) {
    txt = " Distance from the sun: 1.434b km - Orbital Period: 29 years - Radius: 58,232 km - Mass: 5.683 × 10^26 kg ";
  	var radius4 = 350,
    segments4 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius4, segments4);

	geometry.vertices.shift();

	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
  	} else{
  		txt= "Operation cancelled";
  		var radius4 = 350,
    	segments4 = 2000,
    	material = new THREE.LineBasicMaterial({ color: 0x283747 }),
    	geometry = new THREE.CircleGeometry(radius4, segments4);

		geometry.vertices.shift();

		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
 		}
  	document.getElementById("demo").innerHTML = txt;
	}

function ura() {
  	var txt;
  	if (confirm("Information on Uranus:")) {
    txt = " Distance from the sun: 2.871b km - Orbital Period: 84 years - Radius: 25,362 km - Mass: 8.681 × 10^25 kg ";
   
	var radius5 = 440,
    segments5 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius5, segments5);

	geometry.vertices.shift();

	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
	}else{
  		txt= "Operation cancelled";

		var radius5 = 440,
    	segments5 = 2000,
   		material = new THREE.LineBasicMaterial({ color: 0x283747 }),
    	geometry = new THREE.CircleGeometry(radius5, segments5);

		geometry.vertices.shift();

		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
  		} 
  	document.getElementById("demo").innerHTML = txt;
	}

function nep() {
  	var txt;
  	if (confirm("Information on Neptune:")) {
    txt = " Distance from the sun: 4.495b km - Orbital Period: 165 years - Radius: 24,622 km - Mass: 1.024 × 10^26 kg ";
  	var radius6 = 530, 
    segments6 = 2000,
    material = new THREE.LineBasicMaterial({ color: 0xffff00 }),
    geometry = new THREE.CircleGeometry(radius6, segments6);

	geometry.vertices.shift();

	scene.add(new THREE.Line(geometry, material));
	scene.add(new THREE.LineLoop(geometry, material));
  	} else{
  		txt= "Operation cancelled";
  		var radius6 = 530,
	    segments6 = 2000,
		material = new THREE.LineBasicMaterial({ color: 0x283747 }),
	    geometry = new THREE.CircleGeometry(radius6, segments6);

		geometry.vertices.shift();

		scene.add(new THREE.Line(geometry, material));
		scene.add(new THREE.LineLoop(geometry, material));
  		}
  	document.getElementById("demo").innerHTML = txt;
	}

    </script>

</body>
</html>